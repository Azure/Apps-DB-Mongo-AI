@page "/customers"
@using SharedLib.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using ContosoBikeShopWebApp.Services
@using ContosoBikeShopWebApp.Components.CustomerComponents
@using ContosoBikeShopWebApp.Components

@inject CustomerClientService customerService


<div class="catalog">
    <PageTitle>Customer List</PageTitle>

    <h1>Customers</h1>
    <button class="button-grid" style="margin-bottom:20px" @onclick="@(() => OpenDialog(new Customer()))"><i class="bi bi-plus"></i>Add Customer</button>

    <div class="grid">
        <QuickGrid Items="@_customers.AsQueryable()" Theme="corporate" Pagination="@pagination">
            <PropertyColumn Property="@(c => c.firstName)" Sortable="true" Title="First Name"/>
            <PropertyColumn Property="@(c => c.lastName)" Sortable="true" Title="Last Name"/>
            <PropertyColumn Property="@(c => c.emailAddress)" Sortable="true" Title="Email"/>
            <TemplateColumn Title="Edit">
                <button class="button-grid" @onclick="@(() => OpenDialog(context))"><i class="bi bi-pencil"></i>Edit</button>
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="button-grid" @onclick="@(e => OpenConfirmation(context))"><i class="bi bi-trash"></i>Delete</button>
            </TemplateColumn>
        </QuickGrid>
    </div>

    <Paginator State="@pagination"/>

    @if (DialogIsOpen)
    {
        <CustomerDialog OnClose="@OnDialogClose" customerId="@customerId" Customer="@_customer">
        </CustomerDialog>
    }

    @if (_confirmationDialogOpen)
    {
        <Confirmation Caption="Delete Customer"
                      Message="@_messageText"
                      OnClose="@OnConfirmationClose"
                      Type="Confirmation.Category.DeleteNot">
        </Confirmation>
    }

</div>

@code {

    private bool DialogIsOpen;

    private List<Customer> _customers = new();

    readonly PaginationState pagination = new() { ItemsPerPage = 20 };

    private string customerId = "";

    private Customer _customer = new();

    private string? _messageText;

    private bool _confirmationDialogOpen;

    public async Task<List<Customer>> GetCustomerList()
    {
        return await customerService.GetAllCustomers();
    }

    protected override async Task OnInitializedAsync()
    {
        _customers = await GetCustomerList();
    }

    private void OpenDialog(Customer c)
    {
        _customer = c;
        customerId = c.customerId;
        DialogIsOpen = true;
    }

    private async Task OnDialogClose(bool isOk)
    {
        DialogIsOpen = false;
        if (isOk)
            _customers = await GetCustomerList();
    }

    private void OpenConfirmation(Customer c)
    {
        _confirmationDialogOpen = true;
        _messageText = "Do you want to delete the customer ?";
        customerId = c.id;
    }

    private async Task OnConfirmationClose(bool isOk)
    {
        if (isOk)
        {
            await customerService.DeleteCustomer(_customer);
        }

        _customers = await GetCustomerList();
        _confirmationDialogOpen = false;
    }


}